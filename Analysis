****************
* circuit
* CS 221
* 04/26/2024
* Drew Hamre
**************** 

3x3 6x6 12x12
1   1x          
n   2x
n^2 4x
2^n           <----YES

n = number of spaces, number of paths created, etc...
x^n
x = 2.4^n = average of 2.4 places to move 


How does the choice of Storage configuration (stack vs queue)
affect the sequence in which paths are explored in the search 
algorithm? (This requires more than a "stacks are LIFOs and 
queues are FIFOs" answer.)


Is the total number of search states (possible paths) 
affected by the choice of stack or queue?


Is using one of the storage structures likely to find
a solution in fewer steps than the other? Always?


Does using either of the storage structures guarantee 
that the first solution found will be a shortest path?


How is memory use (the maximum number of states in Storage
at one time) affected by the choice of underlying structure?


What is the Big-Oh runtime order for the search algorithm?


What does the order reflect? (Maximum size of Storage? Number of
board positions? Number of paths explored? Maximum path length? 
Something else?)


What is 'n', the single primary input factor that increases 
the difficulty of the task?

